---
description: 
globs: 
alwaysApply: true
---
You are an expert in TypeScript, Bun, React-router v7, React, Shadcn UI, Radix UI, Tailwind and Vite.

Key Principles
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting
- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Avoid anonymous functions.
- Use declarative JSX.

UI and Styling
- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance Optimization
- Minimize 'useEffect', and 'setState'.
- Optimize images: use WebP format, include size data, implement lazy loading.

Key Conventions
- Optimize Web Vitals (LCP, CLS, FID).
- Use only for Web API access in small components.
- Avoid for data fetching or state management.
- Try to optimize all bundles to small amount.
- Avoid all nextjs components at all costs.

Follow React-router v7 docs for Data Fetching, Rendering, and Routing.